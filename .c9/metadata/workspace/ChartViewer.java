{"filter":false,"title":"ChartViewer.java","tooltip":"/ChartViewer.java","undoManager":{"mark":72,"position":72,"stack":[[{"start":{"row":76,"column":0},"end":{"row":167,"column":1},"action":"remove","lines":["","","class DirOval extends GOval {","    private double dirX;","    private double dirY;","    GraphicsProgram window;","    GRect bounds;","    Random rand = new Random();","","    public DirOval(int posX, int posY, int width, int height, GraphicsProgram initwindow, GRect initBounds) {","        super(posX, posY, width, height);","        dirX = rand.nextDouble();","        dirY = rand.nextDouble();","        window = initwindow;","        bounds = initBounds;","    }","","    public void move(double speed) {","        double padding = bounds.getX();","        if (this.getX() < padding) {","            dirX *= -1;","        }","        if (this.getX() + this.getWidth() > bounds.getWidth() + padding) {","            dirX *= -1;","        }","        if (this.getY() < padding) {","            dirY *= -1;","        }","        if (this.getY() + this.getHeight() > bounds.getHeight() + padding) {","            dirY *= -1;","        }","        this.move(speed * dirX, speed * dirY);","    }","","    public void checkBallCollisions(ArrayList<DirOval> ovals) {","        for (DirOval oval : ovals) {","            double left = this.getX();","            double right = this.getX() + this.getWidth();","            double top = this.getY();","            double bottom = this.getY() + this.getHeight();","","            double ovalLeft = oval.getX();","            double ovalRight = oval.getX() + oval.getWidth();","            double ovalTop = oval.getY();","            double ovalBottom = oval.getY() + oval.getHeight();","","            boolean topAboveBottom = top < ovalBottom && bottom > ovalBottom;","            boolean bottomUnderTop = bottom > ovalTop && top < ovalTop;","            boolean leftBeforeRight = left < ovalRight && right > ovalRight;","            boolean rightPastLeft = right > ovalLeft && left < ovalLeft;","","            boolean topWithin = top > ovalTop && top < ovalBottom;","            boolean bottomWithin = bottom < ovalBottom && bottom > ovalTop;","            boolean leftWithin = left < ovalRight && left > ovalLeft;","            boolean rightWithin = right > ovalLeft && right < ovalRight;","","            if(topAboveBottom && (rightWithin || leftWithin)){","                this.move(0, 1.05 * (top - ovalBottom));","                dirY *= -1;","            }","            else if (bottomUnderTop && (rightWithin || leftWithin)) {","                this.move(0, 1.05 * (bottom - ovalTop));","                dirY *= -1;","            }","            if (leftBeforeRight && (topWithin || bottomWithin)) {","                this.move(1.05 * (ovalRight - left), 0);","                dirX *= -1;","            }","            else if (rightPastLeft && (topWithin || bottomWithin)) {","                this.move(1.05 * (ovalLeft - right), 0);","                dirX *= -1;","            }","        }","    }","","    public void fixStrayBall() {","        double padding = bounds.getX();","","        if (this.getX() + (this.getWidth() * 0.75) < padding) {","            this.move(this.getWidth() * 5, 0);","        }","        if (this.getX() + (this.getWidth() * 0.25) > bounds.getWidth() + padding) {","            this.move(this.getWidth() * -5, 0);","        }","        if (this.getY() + (this.getWidth() * 0.75) < padding) {","            this.move(0, this.getWidth() * 5);","        }","        if (this.getY() + (this.getHeight() * 0.25) > bounds.getHeight() + padding) {","            this.move(0, this.getWidth() * -5);","        }","    }","}"],"id":288,"ignore":true}],[{"start":{"row":0,"column":0},"end":{"row":76,"column":0},"action":"remove","lines":["import acm.graphics.GOval;","import acm.graphics.GRect;","import acm.program.GraphicsProgram;","import javax.swing.*;","import java.awt.*;","import java.awt.event.ComponentEvent;","import java.awt.event.ComponentListener;","import java.util.ArrayList;","import java.util.Random;","","public class Inherits extends GraphicsProgram{","    public static void main(String[] args){","        new Inherits().start(args);","    }","    ","     public void run() {","        int num = Integer.parseInt(JOptionPane.showInputDialog(null, \"How many objects?\"));","","        int width = 20;","        int height = 20;","        final int boundsPadding = 30;","        Random rand = new Random();","        ArrayList<DirOval> ovals = new ArrayList<>();","","        final GRect bounds = new GRect(boundsPadding, boundsPadding, this.getWidth() - (boundsPadding * 2), this.getHeight() - (boundsPadding * 2));","        bounds.setColor(Color.black);","        add(bounds);","","        this.addComponentListener(new ComponentListener() {","            @Override","            public void componentResized(ComponentEvent e) {","                bounds.setSize(e.getComponent().getWidth() - (boundsPadding * 2), e.getComponent().getHeight() - (boundsPadding * 2));","            }","","            @Override","            public void componentMoved(ComponentEvent e) {","","            }","","            @Override","            public void componentShown(ComponentEvent e) {","","            }","","            @Override","            public void componentHidden(ComponentEvent e) {","","            }","        });","","        for (int i = 0; i < num; i++) {","            int posX = rand.nextInt(this.getWidth() - (boundsPadding * 3)) + boundsPadding;","            int posY = rand.nextInt(this.getHeight() - (boundsPadding * 3)) + boundsPadding;","","            DirOval oval = new DirOval(posX, posY, width, height, this, bounds);","            oval.setFillColor(new Color(rand.nextInt(255), rand.nextInt(255), rand.nextInt(255)));","            oval.setFilled(true);","            add(oval);","            ovals.add(oval);","        }","","        while (true) {","            for (DirOval oval : ovals) {","                oval.move(5);","                oval.checkBallCollisions(ovals);","                oval.fixStrayBall();","            }","","            try {","                Thread.sleep(10);","            } catch (InterruptedException e) {","                e.printStackTrace();","            }","        }","    }","}",""],"id":289},{"start":{"row":0,"column":0},"end":{"row":103,"column":1},"action":"insert","lines":["import java.awt.Graphics;","import java.awt.Graphics2D;","import java.awt.Rectangle;","import javax.swing.JComponent;","import java.awt.event.MouseListener;","import java.awt.event.MouseEvent;","import javax.swing.JFrame;","import java.awt.event.KeyListener;","import java.awt.event.KeyEvent;","import javax.swing.KeyStroke;","","/**","   This component displays a rectangle that can be moved. ","*/","public class RectangleViewer3","{  ","   public static void main(String[] args)","   {        ","      JFrame frame = new RectangleFrame3();","      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);","      frame.setVisible(true);","   }","} ","","class RectangleFrame3 extends JFrame","{","   private static final int FRAME_WIDTH = 300;","   private static final int FRAME_HEIGHT = 400;","","   private RectangleComponent3 scene;","","   class MousePressListener implements MouseListener","   {  ","      public void mousePressed(MouseEvent event)","      {  ","         int x = event.getX();","         int y = event.getY();","         ","         scene.moveRectangleTo(x, y);","      }","","      // Do-nothing methods","      public void mouseReleased(MouseEvent event) {}","      public void mouseClicked(MouseEvent event) {}","      public void mouseEntered(MouseEvent event) {}","      public void mouseExited(MouseEvent event) {}","   }","","          ","   public RectangleFrame3()","   {","      scene = new RectangleComponent3();","      add(scene);","","      MouseListener listener = new MousePressListener();","      scene.addMouseListener(listener);","","      scene.setFocusable(true);","","      setSize(FRAME_WIDTH, FRAME_HEIGHT);","   }","} ","","class RectangleComponent3 extends JComponent","{","   public int BOX_X = 10;","   public int BOX_Y = 10;","   public int BOX_WIDTH = 20;","   public int BOX_HEIGHT = 30;","   public int barLevel;","   ","   public Rectangle[] bars = new Rectangle[30];","","   public RectangleComponent3()","   {  ","      // The rectangle that the paintComponent method draws ","      for (int i = 0; i < bars.length; i++) {","\t\t\tbars[i] = new Rectangle(BOX_X, BOX_Y, 0, 0);","      }","   }","","   public void paintComponent(Graphics g)","   {  ","      Graphics2D g2 = (Graphics2D) g;","      for (int i = 0; i < bars.length; i++) {","         g2.draw(bars[i]);","      }","   }","","   /**","      Moves the rectangle to the given location.","      @param x the x-position of the new location","      @param y the y-position of the new location","   */","   public void moveRectangleTo(int x, int y)","   {","      barLevel = y / 30;","      bars[barLevel] = new Rectangle(BOX_X, 10+(barLevel*30), x, 30);","      repaint();","              ","   }","","","}"]}],[{"start":{"row":14,"column":13},"end":{"row":14,"column":29},"action":"remove","lines":["RectangleViewer3"],"id":290},{"start":{"row":14,"column":13},"end":{"row":14,"column":14},"action":"insert","lines":["I"]}],[{"start":{"row":14,"column":14},"end":{"row":14,"column":15},"action":"insert","lines":["n"],"id":291}],[{"start":{"row":14,"column":15},"end":{"row":14,"column":16},"action":"insert","lines":["h"],"id":292}],[{"start":{"row":14,"column":16},"end":{"row":14,"column":17},"action":"insert","lines":["e"],"id":293}],[{"start":{"row":14,"column":17},"end":{"row":14,"column":18},"action":"insert","lines":["r"],"id":294}],[{"start":{"row":14,"column":18},"end":{"row":14,"column":19},"action":"insert","lines":["i"],"id":295}],[{"start":{"row":14,"column":19},"end":{"row":14,"column":20},"action":"insert","lines":["t"],"id":296}],[{"start":{"row":14,"column":20},"end":{"row":14,"column":21},"action":"insert","lines":["s"],"id":297}],[{"start":{"row":14,"column":13},"end":{"row":14,"column":21},"action":"remove","lines":["Inherits"],"id":298},{"start":{"row":14,"column":13},"end":{"row":14,"column":14},"action":"insert","lines":["R"]}],[{"start":{"row":14,"column":14},"end":{"row":14,"column":15},"action":"insert","lines":["e"],"id":299}],[{"start":{"row":14,"column":15},"end":{"row":14,"column":16},"action":"insert","lines":["c"],"id":300}],[{"start":{"row":14,"column":16},"end":{"row":14,"column":17},"action":"insert","lines":["t"],"id":301}],[{"start":{"row":14,"column":17},"end":{"row":14,"column":18},"action":"insert","lines":["a"],"id":302}],[{"start":{"row":14,"column":18},"end":{"row":14,"column":19},"action":"insert","lines":["n"],"id":303}],[{"start":{"row":14,"column":19},"end":{"row":14,"column":20},"action":"insert","lines":["g"],"id":304}],[{"start":{"row":14,"column":20},"end":{"row":14,"column":21},"action":"insert","lines":["l"],"id":305},{"start":{"row":14,"column":21},"end":{"row":14,"column":22},"action":"insert","lines":["e"]}],[{"start":{"row":14,"column":22},"end":{"row":14,"column":23},"action":"insert","lines":["V"],"id":306}],[{"start":{"row":14,"column":23},"end":{"row":14,"column":24},"action":"insert","lines":["i"],"id":307}],[{"start":{"row":14,"column":24},"end":{"row":14,"column":25},"action":"insert","lines":["e"],"id":308}],[{"start":{"row":14,"column":25},"end":{"row":14,"column":26},"action":"insert","lines":["w"],"id":309}],[{"start":{"row":14,"column":26},"end":{"row":14,"column":27},"action":"insert","lines":["e"],"id":310}],[{"start":{"row":14,"column":27},"end":{"row":14,"column":28},"action":"insert","lines":["r"],"id":311}],[{"start":{"row":14,"column":28},"end":{"row":14,"column":29},"action":"insert","lines":["3"],"id":312}],[{"start":{"row":63,"column":6},"end":{"row":63,"column":15},"action":"remove","lines":["Rectangle"],"id":313},{"start":{"row":63,"column":6},"end":{"row":63,"column":7},"action":"insert","lines":["C"]}],[{"start":{"row":63,"column":7},"end":{"row":63,"column":8},"action":"insert","lines":["h"],"id":314}],[{"start":{"row":63,"column":8},"end":{"row":63,"column":9},"action":"insert","lines":["a"],"id":315}],[{"start":{"row":63,"column":9},"end":{"row":63,"column":10},"action":"insert","lines":["r"],"id":316}],[{"start":{"row":63,"column":10},"end":{"row":63,"column":11},"action":"insert","lines":["t"],"id":317}],[{"start":{"row":63,"column":20},"end":{"row":63,"column":21},"action":"remove","lines":["3"],"id":318}],[{"start":{"row":49,"column":10},"end":{"row":49,"column":19},"action":"remove","lines":["Rectangle"],"id":319}],[{"start":{"row":49,"column":10},"end":{"row":49,"column":11},"action":"insert","lines":["C"],"id":320}],[{"start":{"row":49,"column":11},"end":{"row":49,"column":12},"action":"insert","lines":["h"],"id":321}],[{"start":{"row":49,"column":12},"end":{"row":49,"column":13},"action":"insert","lines":["a"],"id":322}],[{"start":{"row":49,"column":13},"end":{"row":49,"column":14},"action":"insert","lines":["r"],"id":323}],[{"start":{"row":49,"column":14},"end":{"row":49,"column":15},"action":"insert","lines":["t"],"id":324}],[{"start":{"row":49,"column":20},"end":{"row":49,"column":21},"action":"remove","lines":["3"],"id":325}],[{"start":{"row":24,"column":14},"end":{"row":24,"column":15},"action":"remove","lines":["e"],"id":326}],[{"start":{"row":24,"column":6},"end":{"row":24,"column":14},"action":"remove","lines":["Rectangl"],"id":327}],[{"start":{"row":24,"column":6},"end":{"row":24,"column":7},"action":"insert","lines":["C"],"id":328}],[{"start":{"row":24,"column":7},"end":{"row":24,"column":8},"action":"insert","lines":["h"],"id":329}],[{"start":{"row":24,"column":8},"end":{"row":24,"column":9},"action":"insert","lines":["a"],"id":330}],[{"start":{"row":24,"column":9},"end":{"row":24,"column":10},"action":"insert","lines":["r"],"id":331}],[{"start":{"row":24,"column":10},"end":{"row":24,"column":11},"action":"insert","lines":["t"],"id":332}],[{"start":{"row":24,"column":16},"end":{"row":24,"column":17},"action":"remove","lines":["3"],"id":333}],[{"start":{"row":14,"column":13},"end":{"row":14,"column":29},"action":"remove","lines":["RectangleViewer3"],"id":334},{"start":{"row":14,"column":13},"end":{"row":14,"column":14},"action":"insert","lines":["C"]}],[{"start":{"row":14,"column":14},"end":{"row":14,"column":15},"action":"insert","lines":["h"],"id":335}],[{"start":{"row":14,"column":15},"end":{"row":14,"column":16},"action":"insert","lines":["a"],"id":336}],[{"start":{"row":14,"column":16},"end":{"row":14,"column":17},"action":"insert","lines":["r"],"id":337}],[{"start":{"row":14,"column":17},"end":{"row":14,"column":18},"action":"insert","lines":["t"],"id":338}],[{"start":{"row":14,"column":18},"end":{"row":14,"column":19},"action":"insert","lines":["V"],"id":339}],[{"start":{"row":14,"column":19},"end":{"row":14,"column":20},"action":"insert","lines":["i"],"id":340}],[{"start":{"row":14,"column":20},"end":{"row":14,"column":21},"action":"insert","lines":["e"],"id":341}],[{"start":{"row":14,"column":21},"end":{"row":14,"column":22},"action":"insert","lines":["w"],"id":342}],[{"start":{"row":14,"column":22},"end":{"row":14,"column":23},"action":"insert","lines":["e"],"id":343}],[{"start":{"row":14,"column":23},"end":{"row":14,"column":24},"action":"insert","lines":["r"],"id":344}],[{"start":{"row":73,"column":10},"end":{"row":73,"column":29},"action":"remove","lines":["RectangleComponent3"],"id":351},{"start":{"row":73,"column":10},"end":{"row":73,"column":11},"action":"insert","lines":["C"]}],[{"start":{"row":73,"column":11},"end":{"row":73,"column":12},"action":"insert","lines":["h"],"id":352}],[{"start":{"row":73,"column":12},"end":{"row":73,"column":13},"action":"insert","lines":["a"],"id":353}],[{"start":{"row":73,"column":13},"end":{"row":73,"column":14},"action":"insert","lines":["r"],"id":354}],[{"start":{"row":73,"column":14},"end":{"row":73,"column":15},"action":"insert","lines":["t"],"id":355}],[{"start":{"row":73,"column":15},"end":{"row":73,"column":16},"action":"insert","lines":["C"],"id":356}],[{"start":{"row":73,"column":16},"end":{"row":73,"column":17},"action":"insert","lines":["o"],"id":357}],[{"start":{"row":73,"column":17},"end":{"row":73,"column":18},"action":"insert","lines":["m"],"id":358}],[{"start":{"row":73,"column":10},"end":{"row":73,"column":18},"action":"remove","lines":["ChartCom"],"id":359},{"start":{"row":73,"column":10},"end":{"row":73,"column":24},"action":"insert","lines":["ChartComponent"]}],[{"start":{"row":0,"column":0},"end":{"row":103,"column":1},"action":"remove","lines":["import java.awt.Graphics;","import java.awt.Graphics2D;","import java.awt.Rectangle;","import javax.swing.JComponent;","import java.awt.event.MouseListener;","import java.awt.event.MouseEvent;","import javax.swing.JFrame;","import java.awt.event.KeyListener;","import java.awt.event.KeyEvent;","import javax.swing.KeyStroke;","","/**","   This component displays a rectangle that can be moved. ","*/","public class ChartViewer","{  ","   public static void main(String[] args)","   {        ","      JFrame frame = new RectangleFrame3();","      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);","      frame.setVisible(true);","   }","} ","","class ChartFrame extends JFrame","{","   private static final int FRAME_WIDTH = 300;","   private static final int FRAME_HEIGHT = 400;","","   private RectangleComponent3 scene;","","   class MousePressListener implements MouseListener","   {  ","      public void mousePressed(MouseEvent event)","      {  ","         int x = event.getX();","         int y = event.getY();","         ","         scene.moveRectangleTo(x, y);","      }","","      // Do-nothing methods","      public void mouseReleased(MouseEvent event) {}","      public void mouseClicked(MouseEvent event) {}","      public void mouseEntered(MouseEvent event) {}","      public void mouseExited(MouseEvent event) {}","   }","","          ","   public ChartFrame()","   {","      scene = new RectangleComponent3();","      add(scene);","","      MouseListener listener = new MousePressListener();","      scene.addMouseListener(listener);","","      scene.setFocusable(true);","","      setSize(FRAME_WIDTH, FRAME_HEIGHT);","   }","} ","","class ChartComponent extends JComponent","{","   public int BOX_X = 10;","   public int BOX_Y = 10;","   public int BOX_WIDTH = 20;","   public int BOX_HEIGHT = 30;","   public int barLevel;","   ","   public Rectangle[] bars = new Rectangle[30];","","   public ChartComponent()","   {  ","      // The rectangle that the paintComponent method draws ","      for (int i = 0; i < bars.length; i++) {","\t\t\tbars[i] = new Rectangle(BOX_X, BOX_Y, 0, 0);","      }","   }","","   public void paintComponent(Graphics g)","   {  ","      Graphics2D g2 = (Graphics2D) g;","      for (int i = 0; i < bars.length; i++) {","         g2.draw(bars[i]);","      }","   }","","   /**","      Moves the rectangle to the given location.","      @param x the x-position of the new location","      @param y the y-position of the new location","   */","   public void moveRectangleTo(int x, int y)","   {","      barLevel = y / 30;","      bars[barLevel] = new Rectangle(BOX_X, 10+(barLevel*30), x, 30);","      repaint();","              ","   }","","","}"],"id":360},{"start":{"row":0,"column":0},"end":{"row":103,"column":1},"action":"insert","lines":["import java.awt.Graphics;","import java.awt.Graphics2D;","import java.awt.Rectangle;","import javax.swing.JComponent;","import java.awt.event.MouseListener;","import java.awt.event.MouseEvent;","import javax.swing.JFrame;","import java.awt.event.KeyListener;","import java.awt.event.KeyEvent;","import javax.swing.KeyStroke;","","/**","   This component displays a rectangle that can be moved. ","*/","public class ChartViewer","{  ","   public static void main(String[] args)","   {        ","      JFrame frame = new ChartFrame();","      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);","      frame.setVisible(true);","   }","} ","","class ChartFrame extends JFrame","{","   private static final int FRAME_WIDTH = 300;","   private static final int FRAME_HEIGHT = 400;","","   private ChartComponent scene;","","   class MousePressListener implements MouseListener","   {  ","      public void mousePressed(MouseEvent event)","      {  ","         int x = event.getX();","         int y = event.getY();","         ","         scene.moveRectangleTo(x, y);","      }","","      // Do-nothing methods","      public void mouseReleased(MouseEvent event) {}","      public void mouseClicked(MouseEvent event) {}","      public void mouseEntered(MouseEvent event) {}","      public void mouseExited(MouseEvent event) {}","   }","","          ","   public ChartFrame()","   {","      scene = new ChartComponent();","      add(scene);","","      MouseListener listener = new MousePressListener();","      scene.addMouseListener(listener);","","      scene.setFocusable(true);","","      setSize(FRAME_WIDTH, FRAME_HEIGHT);","   }","} ","","class ChartComponent extends JComponent","{","   public int BOX_X = 10;","   public int BOX_Y = 10;","   public int BOX_WIDTH = 20;","   public int BOX_HEIGHT = 30;","   public int barLevel;","   ","   public Rectangle[] bars = new Rectangle[30];","","   public ChartComponent()","   {  ","      // The rectangle that the paintComponent method draws ","      for (int i = 0; i < bars.length; i++) {","\t\t\tbars[i] = new Rectangle(BOX_X, BOX_Y, 0, 0);","      }","   }","","   public void paintComponent(Graphics g)","   {  ","      Graphics2D g2 = (Graphics2D) g;","      for (int i = 0; i < bars.length; i++) {","         g2.draw(bars[i]);","      }","   }","","   /**","      Moves the rectangle to the given location.","      @param x the x-position of the new location","      @param y the y-position of the new location","   */","   public void moveRectangleTo(int x, int y)","   {","      barLevel = y / 30;","      bars[barLevel] = new Rectangle(BOX_X, 10+(barLevel*30), x, 30);","      repaint();","              ","   }","","","}"]}],[{"start":{"row":0,"column":0},"end":{"row":103,"column":1},"action":"remove","lines":["import java.awt.Graphics;","import java.awt.Graphics2D;","import java.awt.Rectangle;","import javax.swing.JComponent;","import java.awt.event.MouseListener;","import java.awt.event.MouseEvent;","import javax.swing.JFrame;","import java.awt.event.KeyListener;","import java.awt.event.KeyEvent;","import javax.swing.KeyStroke;","","/**","   This component displays a rectangle that can be moved. ","*/","public class ChartViewer","{  ","   public static void main(String[] args)","   {        ","      JFrame frame = new ChartFrame();","      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);","      frame.setVisible(true);","   }","} ","","class ChartFrame extends JFrame","{","   private static final int FRAME_WIDTH = 300;","   private static final int FRAME_HEIGHT = 400;","","   private ChartComponent scene;","","   class MousePressListener implements MouseListener","   {  ","      public void mousePressed(MouseEvent event)","      {  ","         int x = event.getX();","         int y = event.getY();","         ","         scene.moveRectangleTo(x, y);","      }","","      // Do-nothing methods","      public void mouseReleased(MouseEvent event) {}","      public void mouseClicked(MouseEvent event) {}","      public void mouseEntered(MouseEvent event) {}","      public void mouseExited(MouseEvent event) {}","   }","","          ","   public ChartFrame()","   {","      scene = new ChartComponent();","      add(scene);","","      MouseListener listener = new MousePressListener();","      scene.addMouseListener(listener);","","      scene.setFocusable(true);","","      setSize(FRAME_WIDTH, FRAME_HEIGHT);","   }","} ","","class ChartComponent extends JComponent","{","   public int BOX_X = 10;","   public int BOX_Y = 10;","   public int BOX_WIDTH = 20;","   public int BOX_HEIGHT = 30;","   public int barLevel;","   ","   public Rectangle[] bars = new Rectangle[30];","","   public ChartComponent()","   {  ","      // The rectangle that the paintComponent method draws ","      for (int i = 0; i < bars.length; i++) {","\t\t\tbars[i] = new Rectangle(BOX_X, BOX_Y, 0, 0);","      }","   }","","   public void paintComponent(Graphics g)","   {  ","      Graphics2D g2 = (Graphics2D) g;","      for (int i = 0; i < bars.length; i++) {","         g2.draw(bars[i]);","      }","   }","","   /**","      Moves the rectangle to the given location.","      @param x the x-position of the new location","      @param y the y-position of the new location","   */","   public void moveRectangleTo(int x, int y)","   {","      barLevel = y / 30;","      bars[barLevel] = new Rectangle(BOX_X, 10+(barLevel*30), x, 30);","      repaint();","              ","   }","","","}"],"id":361},{"start":{"row":0,"column":0},"end":{"row":103,"column":1},"action":"insert","lines":["import java.awt.Graphics;","import java.awt.Graphics2D;","import java.awt.Rectangle;","import javax.swing.JComponent;","import java.awt.event.MouseListener;","import java.awt.event.MouseEvent;","import javax.swing.JFrame;","import java.awt.event.KeyListener;","import java.awt.event.KeyEvent;","import javax.swing.KeyStroke;","","/**","   This component displays a rectangle that can be moved. ","*/","public class ChartViewer","{  ","   public static void main(String[] args)","   {        ","      JFrame frame = new ChartFrame();","      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);","      frame.setVisible(true);","   }","} ","","class ChartFrame extends JFrame","{","   private static final int FRAME_WIDTH = 300;","   private static final int FRAME_HEIGHT = 400;","","   private ChartComponent scene;","","   class MousePressListener implements MouseListener","   {  ","      public void mousePressed(MouseEvent event)","      {  ","         int x = event.getX();","         int y = event.getY();","         ","         scene.moveRectangleTo(x, y);","      }","","      // Do-nothing methods","      public void mouseReleased(MouseEvent event) {}","      public void mouseClicked(MouseEvent event) {}","      public void mouseEntered(MouseEvent event) {}","      public void mouseExited(MouseEvent event) {}","   }","","          ","   public ChartFrame()","   {","      scene = new ChartComponent();","      add(scene);","","      MouseListener listener = new MousePressListener();","      scene.addMouseListener(listener);","","      scene.setFocusable(true);","","      setSize(FRAME_WIDTH, FRAME_HEIGHT);","   }","} ","","class ChartComponent extends JComponent","{","   public int BOX_X = 10;","   public int BOX_Y = 10;","   public int BOX_WIDTH = 20;","   public int BOX_HEIGHT = 30;","   public int barLevel;","   ","   public Rectangle[] bars = new Rectangle[100];","","   public ChartComponent()","   {  ","      // The rectangle that the paintComponent method draws ","      for (int i = 0; i < bars.length; i++) {","\t\t\tbars[i] = new Rectangle(BOX_X, BOX_Y, 0, 0);","      }","   }","","   public void paintComponent(Graphics g)","   {  ","      Graphics2D g2 = (Graphics2D) g;","      for (int i = 0; i < bars.length; i++) {","         g2.draw(bars[i]);","      }","   }","","   /**","      Moves the rectangle to the given location.","      @param x the x-position of the new location","      @param y the y-position of the new location","   */","   public void moveRectangleTo(int x, int y)","   {","      barLevel = y / 30;","      bars[barLevel] = new Rectangle(BOX_X, 10+(barLevel*30), x, 30);","      repaint();","              ","   }","","","}"]}],[{"start":{"row":0,"column":0},"end":{"row":103,"column":1},"action":"remove","lines":["import java.awt.Graphics;","import java.awt.Graphics2D;","import java.awt.Rectangle;","import javax.swing.JComponent;","import java.awt.event.MouseListener;","import java.awt.event.MouseEvent;","import javax.swing.JFrame;","import java.awt.event.KeyListener;","import java.awt.event.KeyEvent;","import javax.swing.KeyStroke;","","/**","   This component displays a rectangle that can be moved. ","*/","public class ChartViewer","{  ","   public static void main(String[] args)","   {        ","      JFrame frame = new ChartFrame();","      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);","      frame.setVisible(true);","   }","} ","","class ChartFrame extends JFrame","{","   private static final int FRAME_WIDTH = 300;","   private static final int FRAME_HEIGHT = 400;","","   private ChartComponent scene;","","   class MousePressListener implements MouseListener","   {  ","      public void mousePressed(MouseEvent event)","      {  ","         int x = event.getX();","         int y = event.getY();","         ","         scene.moveRectangleTo(x, y);","      }","","      // Do-nothing methods","      public void mouseReleased(MouseEvent event) {}","      public void mouseClicked(MouseEvent event) {}","      public void mouseEntered(MouseEvent event) {}","      public void mouseExited(MouseEvent event) {}","   }","","          ","   public ChartFrame()","   {","      scene = new ChartComponent();","      add(scene);","","      MouseListener listener = new MousePressListener();","      scene.addMouseListener(listener);","","      scene.setFocusable(true);","","      setSize(FRAME_WIDTH, FRAME_HEIGHT);","   }","} ","","class ChartComponent extends JComponent","{","   public int BOX_X = 10;","   public int BOX_Y = 10;","   public int BOX_WIDTH = 20;","   public int BOX_HEIGHT = 30;","   public int barLevel;","   ","   public Rectangle[] bars = new Rectangle[100];","","   public ChartComponent()","   {  ","      // The rectangle that the paintComponent method draws ","      for (int i = 0; i < bars.length; i++) {","\t\t\tbars[i] = new Rectangle(BOX_X, BOX_Y, 0, 0);","      }","   }","","   public void paintComponent(Graphics g)","   {  ","      Graphics2D g2 = (Graphics2D) g;","      for (int i = 0; i < bars.length; i++) {","         g2.draw(bars[i]);","      }","   }","","   /**","      Moves the rectangle to the given location.","      @param x the x-position of the new location","      @param y the y-position of the new location","   */","   public void moveRectangleTo(int x, int y)","   {","      barLevel = y / 30;","      bars[barLevel] = new Rectangle(BOX_X, 10+(barLevel*30), x, 30);","      repaint();","              ","   }","","","}"],"id":362,"ignore":true},{"start":{"row":0,"column":0},"end":{"row":103,"column":1},"action":"insert","lines":["import java.awt.Graphics;","import java.awt.Graphics2D;","import java.awt.Rectangle;","import javax.swing.JComponent;","import java.awt.event.MouseListener;","import java.awt.event.MouseEvent;","import javax.swing.JFrame;","import java.awt.event.KeyListener;","import java.awt.event.KeyEvent;","import javax.swing.KeyStroke;","","/**","   This component displays a rectangle that can be moved. ","*/","public class ChartViewer","{  ","   public static void main(String[] args)","   {        ","      JFrame frame = new ChartFrame();","      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);","      frame.setVisible(true);","   }","} ","","class ChartFrame extends JFrame","{","   private static final int FRAME_WIDTH = 300;","   private static final int FRAME_HEIGHT = 400;","","   private ChartComponent scene;","","   class MousePressListener implements MouseListener","   {  ","      public void mousePressed(MouseEvent event)","      {  ","         int x = event.getX();","         int y = event.getY();","         ","         scene.moveRectangleTo(x, y);","      }","","      // Do-nothing methods","      public void mouseReleased(MouseEvent event) {}","      public void mouseClicked(MouseEvent event) {}","      public void mouseEntered(MouseEvent event) {}","      public void mouseExited(MouseEvent event) {}","   }","","          ","   public ChartFrame()","   {","      scene = new ChartComponent();","      add(scene);","","      MouseListener listener = new MousePressListener();","      scene.addMouseListener(listener);","","      scene.setFocusable(true);","","      setSize(FRAME_WIDTH, FRAME_HEIGHT);","   }","} ","","class ChartComponent extends JComponent","{","   public int BOX_X = 10;","   public int BOX_Y = 10;","   public int BOX_WIDTH = 20;","   public int BOX_HEIGHT = 30;","   public int barLevel;","   ","   public Rectangle[] bars = new Rectangle[100];","","   public ChartComponent()","   {  ","      // The rectangle that the paintComponent method draws ","      for (int i = 0; i < bars.length; i++) {","\t\t\tbars[i] = new Rectangle(BOX_X, BOX_Y, 0, 0);","      }","   }","","   public void paintComponent(Graphics g)","   {  ","      Graphics2D g2 = (Graphics2D) g;","      for (int i = 0; i < bars.length; i++) {","         g2.draw(bars[i]);","      }","   }","","   /**","      Moves the rectangle to the given location.","      @param x the x-position of the new location","      @param y the y-position of the new location","   */","   public void moveRectangleTo(int x, int y)","   {","      barLevel = y / 30;","      bars[barLevel] = new Rectangle(BOX_X, 10+(barLevel*30), x, 30);","      repaint();","              ","   }","","","}"]}],[{"start":{"row":0,"column":0},"end":{"row":103,"column":1},"action":"remove","lines":["import java.awt.Graphics;","import java.awt.Graphics2D;","import java.awt.Rectangle;","import javax.swing.JComponent;","import java.awt.event.MouseListener;","import java.awt.event.MouseEvent;","import javax.swing.JFrame;","import java.awt.event.KeyListener;","import java.awt.event.KeyEvent;","import javax.swing.KeyStroke;","","/**","   This component displays a rectangle that can be moved. ","*/","public class ChartViewer","{  ","   public static void main(String[] args)","   {        ","      JFrame frame = new ChartFrame();","      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);","      frame.setVisible(true);","   }","} ","","class ChartFrame extends JFrame","{","   private static final int FRAME_WIDTH = 300;","   private static final int FRAME_HEIGHT = 400;","","   private ChartComponent scene;","","   class MousePressListener implements MouseListener","   {  ","      public void mousePressed(MouseEvent event)","      {  ","         int x = event.getX();","         int y = event.getY();","         ","         scene.moveRectangleTo(x, y);","      }","","      // Do-nothing methods","      public void mouseReleased(MouseEvent event) {}","      public void mouseClicked(MouseEvent event) {}","      public void mouseEntered(MouseEvent event) {}","      public void mouseExited(MouseEvent event) {}","   }","","          ","   public ChartFrame()","   {","      scene = new ChartComponent();","      add(scene);","","      MouseListener listener = new MousePressListener();","      scene.addMouseListener(listener);","","      scene.setFocusable(true);","","      setSize(FRAME_WIDTH, FRAME_HEIGHT);","   }","} ","","class ChartComponent extends JComponent","{","   public int BOX_X = 10;","   public int BOX_Y = 10;","   public int BOX_WIDTH = 20;","   public int BOX_HEIGHT = 30;","   public int barLevel;","   ","   public Rectangle[] bars = new Rectangle[100];","","   public ChartComponent()","   {  ","      // The rectangle that the paintComponent method draws ","      for (int i = 0; i < bars.length; i++) {","\t\t\tbars[i] = new Rectangle(BOX_X, BOX_Y, 0, 0);","      }","   }","","   public void paintComponent(Graphics g)","   {  ","      Graphics2D g2 = (Graphics2D) g;","      for (int i = 0; i < bars.length; i++) {","         g2.draw(bars[i]);","      }","   }","","   /**","      Moves the rectangle to the given location.","      @param x the x-position of the new location","      @param y the y-position of the new location","   */","   public void moveRectangleTo(int x, int y)","   {","      barLevel = y / 30;","      bars[barLevel] = new Rectangle(BOX_X, 10+(barLevel*30), x, 30);","      repaint();","              ","   }","","","}"],"id":363,"ignore":true},{"start":{"row":0,"column":0},"end":{"row":105,"column":1},"action":"insert","lines":["import java.awt.Graphics;","import java.awt.Graphics2D;","import java.awt.Rectangle;","import javax.swing.JComponent;","import java.awt.event.MouseListener;","import java.awt.event.MouseEvent;","import javax.swing.JFrame;","import java.awt.event.KeyListener;","import java.awt.event.KeyEvent;","import javax.swing.KeyStroke;","","/**","   This component displays a rectangle that can be moved. ","*/","public class ChartViewer","{  ","   public static void main(String[] args)","   {        ","      JFrame frame = new ChartFrame();","      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);","      frame.setVisible(true);","   }","} ","","class ChartFrame extends JFrame","{","   private static final int FRAME_WIDTH = 300;","   private static final int FRAME_HEIGHT = 400;","","   private ChartComponent scene;","","   class MousePressListener implements MouseListener","   {  ","      public void mousePressed(MouseEvent event)","      {  ","         int x = event.getX();","         int y = event.getY();","         ","         scene.moveRectangleTo(x, y);","      }","","      // Do-nothing methods","      public void mouseReleased(MouseEvent event) {}","      public void mouseClicked(MouseEvent event) {}","      public void mouseEntered(MouseEvent event) {}","      public void mouseExited(MouseEvent event) {}","   }","","          ","   public ChartFrame()","   {","      scene = new ChartComponent();","      add(scene);","","      MouseListener listener = new MousePressListener();","      scene.addMouseListener(listener);","","      scene.setFocusable(true);","","      setSize(FRAME_WIDTH, FRAME_HEIGHT);","   }","} ","","class ChartComponent extends JComponent","{","   public int BOX_X = 10;","   public int BOX_Y = 10;","   public int BOX_WIDTH = 20;","   public int BOX_HEIGHT = 30;","   public int barLevel;","   public int lastY = 30;","   public Rectangle[] bars = new Rectangle[100];","","   public ChartComponent()","   {  ","      // The bar that the paintComponent method draws ","      for (int i = 0; i < bars.length; i++) {","\t\t\tbars[i] = new Rectangle(BOX_X, BOX_Y, 0, 0);","      }","   }","","   public void paintComponent(Graphics g)","   {  ","      Graphics2D g2 = (Graphics2D) g;","      for (int i = 0; i < bars.length; i++) {","         g2.draw(bars[i]);","      }","   }","","   /**","      Moves the rectangle to the given location.","      @param x the x-position of the new location","      @param y the y-position of the new location","   */","   public void moveRectangleTo(int x, int y)","   {","      barLevel = y / 30;","      if (y > lastY) {","         bars[lastY/30] = new Rectangle(BOX_X, lastY, x, 30);","         lastY+=30;","      }","      else","         bars[barLevel] = new Rectangle(BOX_X, (barLevel*30), x, 30);","      repaint();","   }","}"]}],[{"start":{"row":0,"column":0},"end":{"row":105,"column":1},"action":"remove","lines":["import java.awt.Graphics;","import java.awt.Graphics2D;","import java.awt.Rectangle;","import javax.swing.JComponent;","import java.awt.event.MouseListener;","import java.awt.event.MouseEvent;","import javax.swing.JFrame;","import java.awt.event.KeyListener;","import java.awt.event.KeyEvent;","import javax.swing.KeyStroke;","","/**","   This component displays a rectangle that can be moved. ","*/","public class ChartViewer","{  ","   public static void main(String[] args)","   {        ","      JFrame frame = new ChartFrame();","      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);","      frame.setVisible(true);","   }","} ","","class ChartFrame extends JFrame","{","   private static final int FRAME_WIDTH = 300;","   private static final int FRAME_HEIGHT = 400;","","   private ChartComponent scene;","","   class MousePressListener implements MouseListener","   {  ","      public void mousePressed(MouseEvent event)","      {  ","         int x = event.getX();","         int y = event.getY();","         ","         scene.moveRectangleTo(x, y);","      }","","      // Do-nothing methods","      public void mouseReleased(MouseEvent event) {}","      public void mouseClicked(MouseEvent event) {}","      public void mouseEntered(MouseEvent event) {}","      public void mouseExited(MouseEvent event) {}","   }","","          ","   public ChartFrame()","   {","      scene = new ChartComponent();","      add(scene);","","      MouseListener listener = new MousePressListener();","      scene.addMouseListener(listener);","","      scene.setFocusable(true);","","      setSize(FRAME_WIDTH, FRAME_HEIGHT);","   }","} ","","class ChartComponent extends JComponent","{","   public int BOX_X = 10;","   public int BOX_Y = 10;","   public int BOX_WIDTH = 20;","   public int BOX_HEIGHT = 30;","   public int barLevel;","   public int lastY = 30;","   public Rectangle[] bars = new Rectangle[100];","","   public ChartComponent()","   {  ","      // The bar that the paintComponent method draws ","      for (int i = 0; i < bars.length; i++) {","\t\t\tbars[i] = new Rectangle(BOX_X, BOX_Y, 0, 0);","      }","   }","","   public void paintComponent(Graphics g)","   {  ","      Graphics2D g2 = (Graphics2D) g;","      for (int i = 0; i < bars.length; i++) {","         g2.draw(bars[i]);","      }","   }","","   /**","      Moves the rectangle to the given location.","      @param x the x-position of the new location","      @param y the y-position of the new location","   */","   public void moveRectangleTo(int x, int y)","   {","      barLevel = y / 30;","      if (y > lastY) {","         bars[lastY/30] = new Rectangle(BOX_X, lastY, x, 30);","         lastY+=30;","      }","      else","         bars[barLevel] = new Rectangle(BOX_X, (barLevel*30), x, 30);","      repaint();","   }","}"],"id":364,"ignore":true},{"start":{"row":0,"column":0},"end":{"row":105,"column":1},"action":"insert","lines":["import java.awt.Graphics;","import java.awt.Graphics2D;","import java.awt.Rectangle;","import javax.swing.JComponent;","import java.awt.event.MouseListener;","import java.awt.event.MouseEvent;","import javax.swing.JFrame;","import java.awt.event.KeyListener;","import java.awt.event.KeyEvent;","import javax.swing.KeyStroke;","","/**","   This component displays a rectangle that can be moved. ","*/","public class ChartViewer","{  ","   public static void main(String[] args)","   {        ","      JFrame frame = new ChartFrame();","      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);","      frame.setVisible(true);","   }","} ","","class ChartFrame extends JFrame","{","   private static final int FRAME_WIDTH = 300;","   private static final int FRAME_HEIGHT = 400;","","   private ChartComponent scene;","","   class MousePressListener implements MouseListener","   {  ","      public void mousePressed(MouseEvent event)","      {  ","         int x = event.getX();","         int y = event.getY();","         ","         scene.moveRectangleTo(x, y);","      }","","      // Do-nothing methods","      public void mouseReleased(MouseEvent event) {}","      public void mouseClicked(MouseEvent event) {}","      public void mouseEntered(MouseEvent event) {}","      public void mouseExited(MouseEvent event) {}","   }","","          ","   public ChartFrame()","   {","      scene = new ChartComponent();","      add(scene);","","      MouseListener listener = new MousePressListener();","      scene.addMouseListener(listener);","","      scene.setFocusable(true);","","      setSize(FRAME_WIDTH, FRAME_HEIGHT);","   }","} ","","class ChartComponent extends JComponent","{","   public int box_x = 10;","   public int box_y = 10;","   public int BOX_WIDTH = 20;","   public int BOX_HEIGHT = 30;","   public int barLevel;","   public int lastY = 30;","   public Rectangle[] bars = new Rectangle[100];","","   public ChartComponent()","   {  ","      // The bar that the paintComponent method draws ","      for (int i = 0; i < bars.length; i++) {","\t\t\tbars[i] = new Rectangle(box_x, box_y, 0, 0);","      }","   }","","   public void paintComponent(Graphics g)","   {  ","      Graphics2D g2 = (Graphics2D) g;","      for (int i = 0; i < bars.length; i++) {","         g2.draw(bars[i]);","      }","   }","","   /**","      Moves the rectangle to the given location.","      @param x the x-position of the new location","      @param y the y-position of the new location","   */","   public void moveRectangleTo(int x, int y)","   {","      barLevel = y / 30;","      if (y > lastY) {","         bars[lastY/30] = new Rectangle(box_x, lastY, x, 30);","         lastY+=30;","      }","      else","         bars[barLevel] = new Rectangle(box_x, (barLevel*30), x, 30);","      repaint();","   }","}"]}],[{"start":{"row":0,"column":0},"end":{"row":105,"column":1},"action":"remove","lines":["import java.awt.Graphics;","import java.awt.Graphics2D;","import java.awt.Rectangle;","import javax.swing.JComponent;","import java.awt.event.MouseListener;","import java.awt.event.MouseEvent;","import javax.swing.JFrame;","import java.awt.event.KeyListener;","import java.awt.event.KeyEvent;","import javax.swing.KeyStroke;","","/**","   This component displays a rectangle that can be moved. ","*/","public class ChartViewer","{  ","   public static void main(String[] args)","   {        ","      JFrame frame = new ChartFrame();","      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);","      frame.setVisible(true);","   }","} ","","class ChartFrame extends JFrame","{","   private static final int FRAME_WIDTH = 300;","   private static final int FRAME_HEIGHT = 400;","","   private ChartComponent scene;","","   class MousePressListener implements MouseListener","   {  ","      public void mousePressed(MouseEvent event)","      {  ","         int x = event.getX();","         int y = event.getY();","         ","         scene.moveRectangleTo(x, y);","      }","","      // Do-nothing methods","      public void mouseReleased(MouseEvent event) {}","      public void mouseClicked(MouseEvent event) {}","      public void mouseEntered(MouseEvent event) {}","      public void mouseExited(MouseEvent event) {}","   }","","          ","   public ChartFrame()","   {","      scene = new ChartComponent();","      add(scene);","","      MouseListener listener = new MousePressListener();","      scene.addMouseListener(listener);","","      scene.setFocusable(true);","","      setSize(FRAME_WIDTH, FRAME_HEIGHT);","   }","} ","","class ChartComponent extends JComponent","{","   public int box_x = 10;","   public int box_y = 10;","   public int BOX_WIDTH = 20;","   public int BOX_HEIGHT = 30;","   public int barLevel;","   public int lastY = 30;","   public Rectangle[] bars = new Rectangle[100];","","   public ChartComponent()","   {  ","      // The bar that the paintComponent method draws ","      for (int i = 0; i < bars.length; i++) {","\t\t\tbars[i] = new Rectangle(box_x, box_y, 0, 0);","      }","   }","","   public void paintComponent(Graphics g)","   {  ","      Graphics2D g2 = (Graphics2D) g;","      for (int i = 0; i < bars.length; i++) {","         g2.draw(bars[i]);","      }","   }","","   /**","      Moves the rectangle to the given location.","      @param x the x-position of the new location","      @param y the y-position of the new location","   */","   public void moveRectangleTo(int x, int y)","   {","      barLevel = y / 30;","      if (y > lastY) {","         bars[lastY/30] = new Rectangle(box_x, lastY, x, 30);","         lastY+=30;","      }","      else","         bars[barLevel] = new Rectangle(box_x, (barLevel*30), x, 30);","      repaint();","   }","}"],"id":365},{"start":{"row":0,"column":0},"end":{"row":124,"column":1},"action":"insert","lines":["import java.awt.Graphics;","import java.awt.Graphics2D;","import java.awt.Rectangle;","import javax.swing.JComponent;","import java.awt.event.MouseListener;","import java.awt.event.MouseEvent;","import javax.swing.JFrame;","","//Created by Aneesh Lodhavia and Alex Shortt","","/**"," This component displays a rectangle that can be moved."," */","public class ChartViewer","{","    public static void main(String[] args)","    {","        JFrame frame = new ChartFrame();","        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);","        frame.setVisible(true);","    }","}","","/**"," * Self Evaluation"," *"," * This projects is very accurate in terms of the clicking. The program can get the exact location of the user's click"," * and move the bar in the chart to that exact point. One flaw is that it's hard to remove the bar completely if it"," * reaches 0 because within the code you can only repaint the current object."," *"," * Making a battleship game would involve creating a grid system because, assuming you want to make it easy, you"," * probably want there to be a grid system so that the user doesn't have to click exactly on the battleship to hit it."," * With a grid they can have some extra space. Assuming you code this, battleship wouldn't be too hard."," */","class ChartFrame extends JFrame","{","    private static final int FRAME_WIDTH = 300;","    private static final int FRAME_HEIGHT = 400;","","    private ChartComponent scene;","","    class MousePressListener implements MouseListener","    {","        public void mousePressed(MouseEvent event)","        {","            int x = event.getX();","            int y = event.getY();","","            scene.moveRectangleTo(x, y);","        }","","        // Do-nothing methods","        public void mouseReleased(MouseEvent event) {}","        public void mouseClicked(MouseEvent event) {}","        public void mouseEntered(MouseEvent event) {}","        public void mouseExited(MouseEvent event) {}","    }","","","    public ChartFrame()","    {","        scene = new ChartComponent();","        add(scene);","","        MouseListener listener = new MousePressListener();","        scene.addMouseListener(listener);","","        scene.setFocusable(true);","","        setSize(FRAME_WIDTH, FRAME_HEIGHT);","    }","}","","class ChartComponent extends JComponent","{","    public int BOX_X = 10;","    public int BOX_Y = 10;","    public int BOX_WIDTH = 20;","    public int BOX_HEIGHT = 30;","    public int barLevel;","    public int lastY = 30;","    public Rectangle[] bars = new Rectangle[100];","","    /**","     * Component in charge of drawing the bars","     */","    public ChartComponent()","    {","        // The bar that the paintComponent method draws","        for (int i = 0; i < bars.length; i++) {","            bars[i] = new Rectangle(BOX_X, BOX_Y, 0, 0);","        }","    }","","    /**","     * Paints the component on the screen","     * @param g graphics program","     */","    public void paintComponent(Graphics g)","    {","        Graphics2D g2 = (Graphics2D) g;","        for (int i = 0; i < bars.length; i++) {","            g2.draw(bars[i]);","        }","    }","","    /**","     Moves the rectangle to the given location.","     @param x the x-position of the new location","     @param y the y-position of the new location","     */","    public void moveRectangleTo(int x, int y)","    {","        x -= 10;","        barLevel = y / 30;","        if(x < 3) x = 0;","        if (y > lastY) {","            bars[lastY/30] = new Rectangle(BOX_X, lastY, x, 30);","            lastY+=30;","        }","        else","            bars[barLevel] = new Rectangle(BOX_X, (barLevel*30), x, 30);","        repaint();","    }","}"]}],[{"start":{"row":0,"column":0},"end":{"row":124,"column":1},"action":"remove","lines":["import java.awt.Graphics;","import java.awt.Graphics2D;","import java.awt.Rectangle;","import javax.swing.JComponent;","import java.awt.event.MouseListener;","import java.awt.event.MouseEvent;","import javax.swing.JFrame;","","//Created by Aneesh Lodhavia and Alex Shortt","","/**"," This component displays a rectangle that can be moved."," */","public class ChartViewer","{","    public static void main(String[] args)","    {","        JFrame frame = new ChartFrame();","        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);","        frame.setVisible(true);","    }","}","","/**"," * Self Evaluation"," *"," * This projects is very accurate in terms of the clicking. The program can get the exact location of the user's click"," * and move the bar in the chart to that exact point. One flaw is that it's hard to remove the bar completely if it"," * reaches 0 because within the code you can only repaint the current object."," *"," * Making a battleship game would involve creating a grid system because, assuming you want to make it easy, you"," * probably want there to be a grid system so that the user doesn't have to click exactly on the battleship to hit it."," * With a grid they can have some extra space. Assuming you code this, battleship wouldn't be too hard."," */","class ChartFrame extends JFrame","{","    private static final int FRAME_WIDTH = 300;","    private static final int FRAME_HEIGHT = 400;","","    private ChartComponent scene;","","    class MousePressListener implements MouseListener","    {","        public void mousePressed(MouseEvent event)","        {","            int x = event.getX();","            int y = event.getY();","","            scene.moveRectangleTo(x, y);","        }","","        // Do-nothing methods","        public void mouseReleased(MouseEvent event) {}","        public void mouseClicked(MouseEvent event) {}","        public void mouseEntered(MouseEvent event) {}","        public void mouseExited(MouseEvent event) {}","    }","","","    public ChartFrame()","    {","        scene = new ChartComponent();","        add(scene);","","        MouseListener listener = new MousePressListener();","        scene.addMouseListener(listener);","","        scene.setFocusable(true);","","        setSize(FRAME_WIDTH, FRAME_HEIGHT);","    }","}","","class ChartComponent extends JComponent","{","    public int BOX_X = 10;","    public int BOX_Y = 10;","    public int BOX_WIDTH = 20;","    public int BOX_HEIGHT = 30;","    public int barLevel;","    public int lastY = 30;","    public Rectangle[] bars = new Rectangle[100];","","    /**","     * Component in charge of drawing the bars","     */","    public ChartComponent()","    {","        // The bar that the paintComponent method draws","        for (int i = 0; i < bars.length; i++) {","            bars[i] = new Rectangle(BOX_X, BOX_Y, 0, 0);","        }","    }","","    /**","     * Paints the component on the screen","     * @param g graphics program","     */","    public void paintComponent(Graphics g)","    {","        Graphics2D g2 = (Graphics2D) g;","        for (int i = 0; i < bars.length; i++) {","            g2.draw(bars[i]);","        }","    }","","    /**","     Moves the rectangle to the given location.","     @param x the x-position of the new location","     @param y the y-position of the new location","     */","    public void moveRectangleTo(int x, int y)","    {","        x -= 10;","        barLevel = y / 30;","        if(x < 3) x = 0;","        if (y > lastY) {","            bars[lastY/30] = new Rectangle(BOX_X, lastY, x, 30);","            lastY+=30;","        }","        else","            bars[barLevel] = new Rectangle(BOX_X, (barLevel*30), x, 30);","        repaint();","    }","}"],"id":366},{"start":{"row":0,"column":0},"end":{"row":125,"column":1},"action":"insert","lines":["import java.awt.Graphics;","import java.awt.Graphics2D;","import java.awt.Rectangle;","import javax.swing.*;","import java.awt.event.MouseListener;","import java.awt.event.MouseEvent;","","//Created by Aneesh Lodhavia and Alex Shortt","","/**"," This component displays a rectangle that can be moved."," */","public class ChartViewer","{","    public static void main(String[] args)","    {","        JFrame frame = new ChartFrame();","        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);","        frame.setVisible(true);","    }","}","","/**"," * Self Evaluation"," *"," * This projects is very accurate in terms of the clicking. The program can get the exact location of the user's click"," * and move the bar in the chart to that exact point. One flaw is that it's hard to remove the bar completely if it"," * reaches 0 because within the code you can only repaint the current object."," *"," * Making a battleship game would involve creating a grid system because, assuming you want to make it easy, you"," * probably want there to be a grid system so that the user doesn't have to click exactly on the battleship to hit it."," * With a grid they can have some extra space. Assuming you code this, battleship wouldn't be too hard."," */","class ChartFrame extends JFrame","{","    private static final int FRAME_WIDTH = 300;","    private static final int FRAME_HEIGHT = 400;","","    private ChartComponent scene;","","    class MousePressListener implements MouseListener","    {","        public void mousePressed(MouseEvent event)","        {","            int x = event.getX();","            int y = event.getY();","","            scene.moveRectangleTo(x, y);","        }","","        // Do-nothing methods","        public void mouseReleased(MouseEvent event) {}","        public void mouseClicked(MouseEvent event) {}","        public void mouseEntered(MouseEvent event) {}","        public void mouseExited(MouseEvent event) {}","    }","","","    public ChartFrame()","    {","        JOptionPane.showMessageDialog(null, \"Click below the current rectangles to make new ones. \\nThe x position (left/right)\" +","                \"of your click decides the height of each rectangle. \\nClick on an existing rectangle to redefine its height.\");","        scene = new ChartComponent();","        add(scene);","","        MouseListener listener = new MousePressListener();","        scene.addMouseListener(listener);","","        scene.setFocusable(true);","","        setSize(FRAME_WIDTH, FRAME_HEIGHT);","    }","}","","class ChartComponent extends JComponent","{","    public int BOX_X = 10;","    public int BOX_Y = 10;","    public int BOX_WIDTH = 20;","    public int BOX_HEIGHT = 30;","    public int barLevel;","    public int lastY = 30;","    public Rectangle[] bars = new Rectangle[100];","","    /**","     * Component in charge of drawing the bars","     */","    public ChartComponent()","    {","        // The bar that the paintComponent method draws","        for (int i = 0; i < bars.length; i++) {","            bars[i] = new Rectangle(BOX_X, BOX_Y, 0, 0);","        }","    }","","    /**","     * Paints the component on the screen","     * @param g graphics program","     */","    public void paintComponent(Graphics g)","    {","        Graphics2D g2 = (Graphics2D) g;","        for (int i = 0; i < bars.length; i++) {","            g2.draw(bars[i]);","        }","    }","","    /**","     Moves the rectangle to the given location.","     @param x the x-position of the new location","     @param y the y-position of the new location","     */","    public void moveRectangleTo(int x, int y)","    {","        x -= 10;","        barLevel = y / 30;","        if(x < 3) x = 0;","        if (y > lastY) {","            bars[lastY/30] = new Rectangle(BOX_X, lastY, x, 30);","            lastY+=30;","        }","        else","            bars[barLevel] = new Rectangle(BOX_X, (barLevel*30), x, 30);","        repaint();","    }","}"]}]]},"ace":{"folds":[],"scrolltop":1181,"scrollleft":0,"selection":{"start":{"row":125,"column":1},"end":{"row":125,"column":1},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":83,"state":"start","mode":"ace/mode/java"}},"timestamp":1505800777270,"hash":"2fee6f404e98d8bb1542a087fdf4d572e433583c"}